// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PMSOFTBookTestTask.Repository.Context;

#nullable disable

namespace PMSOFTBookTestTask.Repository.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PMSOFTBookTestTask.Repository.Entities.AuthorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab3b49b7-fdf9-4209-927d-7f8b7ee682a8"),
                            AuthorName = "Ben Watson"
                        },
                        new
                        {
                            Id = new Guid("78331819-68a7-449a-a6d0-55667b880e07"),
                            AuthorName = "Jeffrey Richter"
                        });
                });

            modelBuilder.Entity("PMSOFTBookTestTask.Repository.Entities.BookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0a2902d-dc5d-491e-8ce3-8c1b67713fb7"),
                            AuthorId = new Guid("ab3b49b7-fdf9-4209-927d-7f8b7ee682a8"),
                            GenreId = new Guid("0ff06213-d844-4382-abdb-5b4ec2cea35e"),
                            Name = "Высокопроизводительный код на платформе .NET",
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("0d618ccb-17c4-4599-8df5-0ea74cac337b"),
                            AuthorId = new Guid("78331819-68a7-449a-a6d0-55667b880e07"),
                            GenreId = new Guid("0ff06213-d844-4382-abdb-5b4ec2cea35e"),
                            Name = "CLR via C#. Программирование на платформе Microsoft .NET Framework 4.5 на языке C#",
                            Year = 2002
                        });
                });

            modelBuilder.Entity("PMSOFTBookTestTask.Repository.Entities.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenreName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ff06213-d844-4382-abdb-5b4ec2cea35e"),
                            GenreName = "IT Education"
                        });
                });

            modelBuilder.Entity("PMSOFTBookTestTask.Repository.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a46f06ed-654d-4c59-ab02-b12fc1202b9a"),
                            Role = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("71163ee0-fd92-4972-b10e-1c1eba321974"),
                            Role = "User"
                        });
                });

            modelBuilder.Entity("PMSOFTBookTestTask.Repository.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d114b954-c91c-4004-b29f-69d6576be258"),
                            Email = "admin@gmail.com",
                            Password = "$2a$11$QTM4Qpxk0RP/LBD0KrS/xektf15VgRQbYOxQ80vjiASJONm63MKPS",
                            RoleId = new Guid("a46f06ed-654d-4c59-ab02-b12fc1202b9a"),
                            Username = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("f67b0ba2-783a-4ac5-a1d4-0692d7be3fbd"),
                            Email = "user@gmail.com",
                            Password = "$2a$11$TGnodoBwhmzJH5nY3EYDL.BQi9E1rqBMrAIqBKlbVjihLYtKDl8Wu",
                            RoleId = new Guid("71163ee0-fd92-4972-b10e-1c1eba321974"),
                            Username = "User"
                        });
                });

            modelBuilder.Entity("PMSOFTBookTestTask.Repository.Entities.BookEntity", b =>
                {
                    b.HasOne("PMSOFTBookTestTask.Repository.Entities.AuthorEntity", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMSOFTBookTestTask.Repository.Entities.GenreEntity", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PMSOFTBookTestTask.Repository.Entities.UserEntity", b =>
                {
                    b.HasOne("PMSOFTBookTestTask.Repository.Entities.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PMSOFTBookTestTask.Repository.Entities.AuthorEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("PMSOFTBookTestTask.Repository.Entities.GenreEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("PMSOFTBookTestTask.Repository.Entities.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
